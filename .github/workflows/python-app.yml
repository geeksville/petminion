# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Petminion Build Status

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: write # we need this permission so we can write to the gh-pages branch

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"
        cache: 'pip'
    - name: Install poetry
      uses: abatilo/actions-poetry@v2
      with:
        poetry-version: 1.7.1   
    #- name: Configure poetry
    # run: |
    #    python -m poetry config virtualenvs.in-project true
    #- name: Install via pip (FIXME - move to poetry)
    #  run: |
    #    pip install --upgrade pip
    #    if [ -f requirements.txt ]; then pip install --extra-index-url https://download.pytorch.org/whl/cpu -r requirements.txt; fi        
    - name: Install via poetry
      run: | 
        # This command will install all dependencies specified in your pyproject.toml file, including the dev dependencies. 
        # The --no-interaction option is used to prevent Poetry from prompting for input, which is necessary in a CI environment. 
        # The --no-root option is used to skip installing the package in the current directory (i.e., the package that's being built). 
        poetry install --no-interaction --with dev
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        poetry run flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        poetry run flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Test with pytest
      run: |
        poetry run pytest
    - name: Build documentation
      # per https://tomasfarias.dev/articles/sphinx-docs-with-poetry-and-github-pages/
      run: |
        mkdir gh-pages
        touch gh-pages/.nojekyll
        cd docs/
        poetry run sphinx-build -b html . _build
        cp -r _build/* ../gh-pages/          
    - name: Deploy docs on push ðŸš€
      if: ${{ github.event_name == 'push' }}
      uses: JamesIves/github-pages-deploy-action@v4
      with:
        branch: gh-pages
        folder: gh-pages